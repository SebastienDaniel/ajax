# Getting started
**mojax** is a modular AJAX utility. It's built to be extended via middleware, allowing you to customize your ajax tool to your needs.

1. add mojax as a dependency to your project: `npm install mojax --save`

2. require mojax in your code: `var mojax = require("mojax");`

3. create the mojax instance you'll be using to make your HTTP requests: `var r = mojax.createRequester();`

From there you can add middleware, with the `use()` method, or make HTTP requests with the `req()` method.

## How mojax uses middleware
When you add middleware to a **requester** (`requester.use()`), the middleware function gets added to a queue.

Middleware are used to manipulate the request parameters **before** the actual HTTP request is started.

Every time you make a request, the request parameters you have provided are piped through each middleware.
Each middleware **must return the request parameters object** for the next middleware to be called. Not returning the request parameters object
(i.e. returning `null` or `undefined`) is how you can cancel a request.

The mojax request method respects the following flow:

1. make a request: `req(params);`
2. your request parameters are *piped* through each middleware
3. the middleware transform your request parameters
4. the final (*transformed*) request parameters are used to send the HTTP request
5. the HTTP request triggers callbacks, based on its progress

### Creating middleware
Middleware is just a function that is provided an `object` argument. It is expected to manipulate the object, and return it.

The code below adds a timeout value of `5000 ms` to every request sent with `r.req()`:
```js
// creating my requester
var r = mojax.createRequester();

// my middleware
function addTimeout(params) {
    // add timeout to all requests
    params.timeout = 5000;

    return params;
}

// adding the middle ware to my requester
r.use(addTimeout);
```


--------
{{>main}}